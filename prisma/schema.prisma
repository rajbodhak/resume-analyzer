generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  email         String    @unique
  emailVerified DateTime?
  password      String? // hashed password
  image         String?

  // Profile
  name              String?
  phoneNumber       String?
  industry          String?
  targetRole        String?
  experienceLevel   String?
  preferredLocation String?

  // Usage tracking
  analysesCount    Int       @default(0)
  lastAnalysisAt   DateTime?
  subscriptionTier String    @default("free")
  creditsRemaining Int       @default(5)

  // Relations
  analyses     Analysis[]
  savedResumes SavedResume[]
  accounts     Account[]
  sessions     Session[]

  @@index([email])
  @@index([createdAt])
}

model Analysis {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Input
  resumeText       String  @db.Text
  jobDescription   String  @db.Text
  originalFileName String?

  // Results
  overallScore       Int
  compatibilityScore Int
  missingKeywords    Json
  foundKeywords      Json
  skillsMatch        Json
  improvements       Json

  // Optional
  coverLetter  String? @db.Text
  analysisType String? // 'job-match' or 'resume-analysis'

  // Tracking
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
}

model SavedResume {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileName   String
  resumeText String  @db.Text
  fileUrl    String?
  isDefault  Boolean @default(false)
  title      String?

  @@index([userId])
  @@index([createdAt])
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
