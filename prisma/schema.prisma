generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  email         String  @unique
  passwordHash  String?
  emailVerified Boolean @default(false)

  // OAuth fields 
  googleId String? @unique
  githubId String? @unique

  // Profile
  name         String?
  profileImage String?
  phoneNumber  String?

  // User preferences
  industry          String?
  targetRole        String?
  experienceLevel   String? // junior, mid, senior, lead
  preferredLocation String?

  // Usage tracking
  analysesCount    Int       @default(0)
  lastAnalysisAt   DateTime?
  subscriptionTier String    @default("free") // free, pro, enterprise
  creditsRemaining Int       @default(5) // for free tier limits

  // Relations
  analyses     Analysis[]
  savedResumes SavedResume[]
  sessions     Session[]

  @@index([email])
  @@index([createdAt])
}

model Analysis {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Input
  resumeText       String  @db.Text
  jobDescription   String  @db.Text
  originalFileName String?

  // Results
  overallScore       Int
  compatibilityScore Int
  missingKeywords    Json
  foundKeywords      Json
  skillsMatch        Json
  improvements       Json

  // Optional
  coverLetter String? @db.Text

  // Analysis metadata
  analysisType String? // 'job-match' or 'resume-analysis'

  // Tracking
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([sessionId])
  @@index([userId])
}

// Optional: For storing user's resumes
model SavedResume {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileName   String
  resumeText String  @db.Text
  fileUrl    String? // if storing files in cloud storage
  isDefault  Boolean @default(false)
  title      String? // e.g., "Software Engineer Resume v2"

  @@index([userId])
  @@index([createdAt])
}

// Optional: For managing user sessions
model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String     @unique
  analyses     Analysis[]

  @@index([sessionToken])
  @@index([userId])
}
